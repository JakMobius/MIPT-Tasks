block bonk_graphics_init {
  bams {
    win 64 64
  };
}

block bonk_graphics_redraw {
  bams {
    draw
  };
}

block floor {
  context var input;

  bams {
    push.d %input%
    dtol
    ltod
    pop.d %input%
  };

  bonk input;
}

block bonk_graphics_put_pixel {
  context var x;
  context var y;
  context var r;
  context var g;
  context var b;

  var index = (x + y * 64) * 4;

  bams {
    push.d %r%
    dtou
    pop.ul rcx
    push.ub rcx

    push.d %g%
    dtou
    pop.ul rcx
    push.ub rcx

    push.d %b%
    dtou
    pop.ul rcx
    push.ub rcx

    push.ub 1

    push.ul 0x80000
    push.d %index%
    dtou
    add.ul
    pop.ul rcx

    pop.ui [rcx]
  };
}

block abs {
  context var input;
  input > 0 or input = -input;
  bonk input;
}

block sqrt {
  context var input;
  var result;

  bams {
    push.d %input%
    sqrt.d
    pop.d %input%
  };

  bonk input;
}

block read_number {
  var result;

  bams {
    in.d
    pop.d %result%
  };

  bonk result;
}

block draw_circle {
  context var r;
  context var g;
  context var b;
  context var x0;
  context var y0;
  context var radius;

  var x = 0;
  var y = radius;
  var new_y;
  var absolute_x;
  var square;
  var sqrt_2 = @sqrt[input = 2];
  var limit = -@floor[input = radius + 0.5] / sqrt_2;

  cycle {
    x >= limit or brek;

    absolute_x = (x / radius);

    square = 1 - absolute_x * absolute_x;

    check square >= 0 {
      new_y = @floor[input=@sqrt[input=square] * radius];

      check y > new_y { y = y - 1; }
      check y < new_y { y = y + 1; }

      cycle {

        @bonk_graphics_put_pixel[x=x0+x, y=y0+y, r=r, g=g, b=b];
        @bonk_graphics_put_pixel[x=x0+x, y=y0-y, r=r, g=g, b=b];
        @bonk_graphics_put_pixel[x=x0-x, y=y0+y, r=r, g=g, b=b];
        @bonk_graphics_put_pixel[x=x0-x, y=y0-y, r=r, g=g, b=b];
        @bonk_graphics_put_pixel[x=x0+y, y=y0+x, r=r, g=g, b=b];
        @bonk_graphics_put_pixel[x=x0+y, y=y0-x, r=r, g=g, b=b];
        @bonk_graphics_put_pixel[x=x0-y, y=y0+x, r=r, g=g, b=b];
        @bonk_graphics_put_pixel[x=x0-y, y=y0-x, r=r, g=g, b=b];

        check y == new_y { brek; }
        check y > new_y { y = y - 1; }
        check y < new_y { y = y + 1; }
        check y == new_y { brek; }
      };
    }

    x = x - 1;
  }
}

block main {

  @bonk_graphics_init;

  var r1 = 1;
  var r2 = 6;
  var r3 = 12;
  var r4 = 18;

  cycle {
    r1 = r1 + 1;
    r1 == 0 and r1 = 1;
    r1 > 30 and r1 = -30;

    r2 = r2 + 1;
    r2 == 0 and r2 = 1;
    r2 > 30 and r2 = -30;

    r3 = r3 + 1;
    r3 == 0 and r3 = 1;
    r3 > 30 and r3 = -30;

    r4 = r4 + 1;
    r4 == 0 and r4 = 1;
    r4 > 30 and r4 = -30;

    @draw_circle[x0=32, y0=32, r=255, g=0, b=0, radius=@abs[input=r1]];
    @draw_circle[x0=32, y0=32, r=0, g=255, b=0, radius=@abs[input=r2]];
    @draw_circle[x0=32, y0=32, r=0, g=0, b=255, radius=@abs[input=r3]];
    @draw_circle[x0=32, y0=32, r=255, g=0, b=255, radius=@abs[input=r4]];

    @bonk_graphics_redraw;

    @draw_circle[x0=32, y0=32, r=0, g=0, b=0, radius=@abs[input=r1]];
    @draw_circle[x0=32, y0=32, r=0, g=0, b=0, radius=@abs[input=r2]];
    @draw_circle[x0=32, y0=32, r=0, g=0, b=0, radius=@abs[input=r3]];
    @draw_circle[x0=32, y0=32, r=0, g=0, b=0, radius=@abs[input=r4]];
  }
}


