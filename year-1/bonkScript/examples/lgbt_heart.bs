help math
help stdio
help txlib

block pow2 {
  context var x;

  bonk x * x;
}

block radfunc {
  context var angle;

  var cosine = @cos[x=angle];
  var sine = @sin[x=angle];

  bonk (2-2*cosine + cosine * (@abs[input=sine]/(cosine + 1.4))) * 9;
}

var limit_y = 0;

block my_graphics_put_pixel {
  context var x;
  context var y;
  context var r;
  context var g;
  context var b;

  y < limit_y and bonk 0;

  @tx_graphics_put_pixel[x=x, y=y, r=r, g=g, b=b];
}

block custom_fill_circle {
  context var r;
  context var g;
  context var b;
  context var x0;
  context var y0;
  context var radius;

  var x = 0;
  var y = radius;
  var limit = -@floor[input = radius + 0.5] / MATH_SQRT_2;

  cycle {
    x >= limit or brek;

    var absolute_x = (x / radius);
    var square = 1 - absolute_x * absolute_x;

    square < 0 and rebonk;

    var new_y = @floor[input=@sqrt[input=square] * radius];
    y = 0;

    check y > new_y { y = y - 1; }
    check y < new_y { y = y + 1; }

    cycle {

      @my_graphics_put_pixel[x=x0+x, y=y0+y, r=r, g=g, b=b];
      @my_graphics_put_pixel[x=x0+x, y=y0-y, r=r, g=g, b=b];
      @my_graphics_put_pixel[x=x0-x, y=y0+y, r=r, g=g, b=b];
      @my_graphics_put_pixel[x=x0-x, y=y0-y, r=r, g=g, b=b];
      @my_graphics_put_pixel[x=x0+y, y=y0+x, r=r, g=g, b=b];
      @my_graphics_put_pixel[x=x0+y, y=y0-x, r=r, g=g, b=b];
      @my_graphics_put_pixel[x=x0-y, y=y0+x, r=r, g=g, b=b];
      @my_graphics_put_pixel[x=x0-y, y=y0-x, r=r, g=g, b=b];

      check y == new_y { brek; }
      y = y + 1;
    };

    x = x - 1;
  }
}


block main {
  @tx_graphics_init;

  var angle = 0;
  var color = 0;
  var delta_angle = MATH_PI / 100;
  var circles = 1;

  cycle {
    var i = 0;

    angle = angle + delta_angle;

    var tangle = angle;

    var tr = 3;
    color = color + MATH_PI / 20;

    var radius;

    cycle {
      i < circles or brek;

      radius = @radfunc[angle = tangle];

      @custom_fill_circle[
        x0=@floor[input = @sin[x = tangle] * radius + 32],
        y0=@floor[input = @cos[x = tangle] * radius + 32] + 10,
        r=128 + @sin[x = color] * 127,
        g=128 + @cos[x = color] * 127,
        b=128 - @sin[x = color] * 127,
        radius=4
      ];

      tangle = tangle + MATH_2_PI / circles;
      radius = @radfunc[angle = tangle];

      i = i + 1;
    }

    angle > 7 and limit_y = 32;
    angle > 10 and brek;

    @tx_graphics_redraw;
  }

  @read_number;
}




